{
	"info": {
		"_postman_id": "760a4660-4b28-4fca-a21e-aafb9b39b3a9",
		"name": "RestfulBooker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30629266",
		"_collection_link": "https://winter-moon-863306.postman.co/workspace/Intern-Route~2c72ff1a-e2f4-42c4-bd27-4badddb6a207/collection/30629266-760a4660-4b28-4fca-a21e-aafb9b39b3a9?action=share&source=collection_link&creator=30629266"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "AuthBooker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response safely\r",
									"let jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    jsonData = {};\r",
									"}\r",
									"\r",
									"//  Functional Tests\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is JSON\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 'token'\", () => {\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", () => {\r",
									"    pm.expect(jsonData.token).to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Token length > 10\", () => {\r",
									"    pm.expect(jsonData.token.length).to.be.above(10);\r",
									"});\r",
									"\r",
									"//  Security Tests\r",
									"pm.test(\"Token shouldn't be predictable\", () => {\r",
									"    let current = jsonData.token;\r",
									"    let last = pm.environment.get(\"lastToken\");\r",
									"\r",
									"    if (last && current) {\r",
									"        pm.expect(current).to.not.equal(last);\r",
									"    }\r",
									"\r",
									"    pm.environment.set(\"lastToken\", current);\r",
									"});\r",
									"\r",
									"pm.test(\"Response doesn't contain script tags\", () => {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"<script>\");\r",
									"});\r",
									"\r",
									"pm.test(\"SQL injection shouldn't pass\", () => {\r",
									"    let reqBody = pm.request.body.raw;\r",
									"    if (reqBody.includes(\"' OR 1=1 --\") || reqBody.includes(\"\\\" OR \\\"1\\\"=\\\"1\")) {\r",
									"        pm.expect(pm.response.code).to.not.equal(200);\r",
									"    }\r",
									"});\r",
									"\r",
									"//  Negative / Validation\r",
									"pm.test(\"Fail response has 'reason' key if credentials invalid\", () => {\r",
									"    if (pm.response.code !== 200) {\r",
									"        pm.expect(jsonData).to.have.property(\"reason\");\r",
									"        pm.expect(jsonData.reason.toLowerCase()).to.include(\"bad credentials\");\r",
									"    }\r",
									"});\r",
									"\r",
									"//  Performance\r",
									"pm.test(\"Response time < 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//  Schema Test (using tv4)\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"token\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"token\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    const isValid = tv4.validate(jsonData, schema);\r",
									"    pm.expect(isValid).to.be.true;\r",
									"});\r",
									"\r",
									"//  Headers\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//  Save token to env\r",
									"if (jsonData.token) {\r",
									"    pm.environment.set(\"authToken\", jsonData.token);\r",
									"}\r",
									"\r",
									"//  Detect empty body\r",
									"const rawBody = pm.request.body.raw || \"\";\r",
									"if (rawBody.trim() === \"{}\") {\r",
									"    pm.test(\"Empty body should fail\", () => {\r",
									"        pm.expect(pm.response.code).to.not.eql(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"//  Optional: Check if request is missing username or password\r",
									"try {\r",
									"    const bodyObj = JSON.parse(rawBody);\r",
									"    if (!bodyObj.username) {\r",
									"        pm.test(\"Missing username should fail\", () => {\r",
									"            pm.expect(pm.response.code).to.not.eql(200);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (!bodyObj.password) {\r",
									"        pm.test(\"Missing password should fail\", () => {\r",
									"            pm.expect(pm.response.code).to.not.eql(200);\r",
									"        });\r",
									"    }\r",
									"} catch (e) {\r",
									"    // malformed body\r",
									"    pm.test(\"Malformed JSON should fail\", () => {\r",
									"        pm.expect(pm.response.code).to.not.eql(200);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "GetBookingIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  1. Status code check\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"//  2. Content-Type check\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//  3. Response time check\r",
									"pm.test(\"Response time is less than 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//  4. Response is array\r",
									"let jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    jsonData = [];\r",
									"}\r",
									"\r",
									"pm.test(\"Response is an array\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"//  5. Each item has bookingid\r",
									"pm.test(\"Each item has bookingid\", () => {\r",
									"    if (jsonData.length > 0) {\r",
									"        jsonData.forEach(item => {\r",
									"            pm.expect(item).to.have.property(\"bookingid\");\r",
									"            pm.expect(item.bookingid).to.be.a(\"number\");\r",
									"        });\r",
									"    }\r",
									"});\r",
									"\r",
									"//  6. Schema validation\r",
									"const schema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            bookingid: { type: \"number\" }\r",
									"        },\r",
									"        required: [\"bookingid\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"//  7. Empty result for unmatched filters (if used)\r",
									"const query = pm.request.url.query.toObject();\r",
									"if (Object.keys(query).length > 0) {\r",
									"    pm.test(\"Filtered result should be empty or valid\", () => {\r",
									"        pm.expect(jsonData).to.be.an(\"array\");\r",
									"    });\r",
									"}\r",
									"\r",
									"//  8. Response should not contain HTML/JS\r",
									"pm.test(\"No HTML or scripts in response\", () => {\r",
									"    const resText = pm.response.text();\r",
									"    pm.expect(resText).to.not.include(\"<script>\");\r",
									"    pm.expect(resText).to.not.include(\"<html>\");\r",
									"});\r",
									"\r",
									"//  9. No cookies expected\r",
									"pm.test(\"No cookies returned\", () => {\r",
									"    pm.expect(pm.cookies.toObject()).to.be.empty;\r",
									"});\r",
									"\r",
									"//  10. Response is consistent (optional)\r",
									"const lastResponse = pm.environment.get(\"lastBookingList\");\r",
									"if (lastResponse) {\r",
									"    pm.test(\"Response changes over time or stays consistent\", () => {\r",
									"        const current = pm.response.text();\r",
									"        pm.expect(current).to.not.eql(lastResponse); // may or may not change\r",
									"    });\r",
									"}\r",
									"pm.environment.set(\"lastBookingList\", pm.response.text());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						},
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking\r\n"
					},
					"response": []
				},
				{
					"name": "GetBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData;\r",
									"\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    jsonData = {};\r",
									"}\r",
									"\r",
									"//  1. Status Code = 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"//  2. Content-Type is application/json\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//  3. Response Time < 1000ms\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//  4. Has all required fields\r",
									"pm.test(\"All required booking fields exist\", () => {\r",
									"    const required = [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\"];\r",
									"    required.forEach(field => pm.expect(jsonData).to.have.property(field));\r",
									"    pm.expect(jsonData.bookingdates).to.have.property(\"checkin\");\r",
									"    pm.expect(jsonData.bookingdates).to.have.property(\"checkout\");\r",
									"});\r",
									"\r",
									"//  5. Check types of fields\r",
									"pm.test(\"Data types are valid\", () => {\r",
									"    pm.expect(jsonData.firstname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.totalprice).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.depositpaid).to.be.a(\"boolean\");\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//  6. Schema validation\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        firstname: { type: \"string\" },\r",
									"        lastname: { type: \"string\" },\r",
									"        totalprice: { type: \"number\" },\r",
									"        depositpaid: { type: \"boolean\" },\r",
									"        bookingdates: {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                checkin: { type: \"string\" },\r",
									"                checkout: { type: \"string\" }\r",
									"            },\r",
									"            required: [\"checkin\", \"checkout\"]\r",
									"        },\r",
									"        additionalneeds: { type: \"string\" }\r",
									"    },\r",
									"    required: [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"//  7. Security: no HTML/JS\r",
									"pm.test(\"No script or HTML tags in response\", () => {\r",
									"    const txt = pm.response.text();\r",
									"    pm.expect(txt).to.not.include(\"<script>\");\r",
									"    pm.expect(txt).to.not.include(\"<html>\");\r",
									"});\r",
									"\r",
									"//  8. Negative Test (if booking not found)\r",
									"if (pm.response.code === 404) {\r",
									"    pm.test(\"Booking not found returns 404\", () => {\r",
									"        pm.expect(pm.response.text().toLowerCase()).to.include(\"not found\");\r",
									"    });\r",
									"}\r",
									"\r",
									"//  9. No cookies expected\r",
									"pm.test(\"No cookies returned\", () => {\r",
									"    pm.expect(pm.cookies.toObject()).to.be.empty;\r",
									"});\r",
									"\r",
									"//  10. Consistency test (if repeated)\r",
									"const lastBooking = pm.environment.get(\"lastBookingData\");\r",
									"if (lastBooking) {\r",
									"    pm.test(\"Booking data stays consistent (optional)\", () => {\r",
									"        pm.expect(pm.response.text()).to.eql(lastBooking);\r",
									"    });\r",
									"}\r",
									"pm.environment.set(\"lastBookingData\", pm.response.text());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/1",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"1"
							]
						},
						"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking/1\r\n"
					},
					"response": []
				},
				{
					"name": "CreateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  1. Status Code\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"//  2. Content-Type header check\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//  3. Response time\r",
									"pm.test(\"Response time is below 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//  4. Response has bookingid\r",
									"let jsonData = pm.response.json();\r",
									"pm.test(\"Response has bookingid\", () => {\r",
									"    pm.expect(jsonData).to.have.property(\"bookingid\");\r",
									"});\r",
									"\r",
									"//  5. Response has booking object\r",
									"pm.test(\"Response has booking object\", () => {\r",
									"    pm.expect(jsonData).to.have.property(\"booking\");\r",
									"});\r",
									"\r",
									"//  6. Check firstname and lastname\r",
									"pm.test(\"Booking has correct firstname and lastname\", () => {\r",
									"    pm.expect(jsonData.booking.firstname).to.eql(\"Jim\");\r",
									"    pm.expect(jsonData.booking.lastname).to.eql(\"Brown\");\r",
									"});\r",
									"\r",
									"//  7. Check price and deposit\r",
									"pm.test(\"Total price and deposit paid are correct\", () => {\r",
									"    pm.expect(jsonData.booking.totalprice).to.eql(111);\r",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(true);\r",
									"});\r",
									"\r",
									"//  8. Check booking dates\r",
									"pm.test(\"Booking dates are correct\", () => {\r",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2019-01-01\");\r",
									"});\r",
									"\r",
									"//  9. Additional needs check\r",
									"pm.test(\"Additional needs is 'Breakfast'\", () => {\r",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(\"Breakfast\");\r",
									"});\r",
									"\r",
									"//  10. Save booking ID\r",
									"pm.environment.set(\"bookingId\", jsonData.bookingid);\r",
									"\r",
									"//  11. Schema validation\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        bookingid: { type: \"number\" },\r",
									"        booking: {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                firstname: { type: \"string\" },\r",
									"                lastname: { type: \"string\" },\r",
									"                totalprice: { type: \"number\" },\r",
									"                depositpaid: { type: \"boolean\" },\r",
									"                bookingdates: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        checkin: { type: \"string\", format: \"date\" },\r",
									"                        checkout: { type: \"string\", format: \"date\" }\r",
									"                    },\r",
									"                    required: [\"checkin\", \"checkout\"]\r",
									"                },\r",
									"                additionalneeds: { type: \"string\" }\r",
									"            },\r",
									"            required: [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\"]\r",
									"        }\r",
									"    },\r",
									"    required: [\"bookingid\", \"booking\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"//  12. No HTML/Script Injection\r",
									"pm.test(\"Response does not contain script/html\", () => {\r",
									"    const res = pm.response.text();\r",
									"    pm.expect(res).to.not.include(\"<script>\");\r",
									"    pm.expect(res).to.not.include(\"<html>\");\r",
									"});\r",
									"\r",
									"//  13. Negative Test – missing required fields\r",
									"try {\r",
									"    const body = JSON.parse(pm.request.body.raw);\r",
									"    if (!body.firstname || !body.lastname || !body.totalprice) {\r",
									"        pm.test(\"Missing required fields should fail\", () => {\r",
									"            pm.expect(pm.response.code).to.not.eql(200);\r",
									"        });\r",
									"    }\r",
									"} catch (e) {\r",
									"    pm.test(\"Malformed JSON should fail\", () => {\r",
									"        pm.expect(pm.response.code).to.not.eql(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"//  14. Idempotency: same request gives different bookingid\r",
									"let lastBookingId = pm.environment.get(\"lastBookingId\");\r",
									"let currentBookingId = jsonData.bookingid;\r",
									"\r",
									"pm.test(\"Booking ID should be unique each time\", () => {\r",
									"    if (lastBookingId) {\r",
									"        pm.expect(currentBookingId).to.not.eql(Number(lastBookingId));\r",
									"    }\r",
									"    pm.environment.set(\"lastBookingId\", currentBookingId);\r",
									"});\r",
									"\r",
									"//  15. Optional: check if retry gives new data\r",
									"// (you can run the request twice to confirm)\r",
									"\r",
									"//  16. No cookies expected\r",
									"pm.test(\"No cookies should be set\", () => {\r",
									"    pm.expect(pm.cookies.toObject()).to.be.empty;\r",
									"});\r",
									"\r",
									"//  17. Invalid HTTP method check\r",
									"pm.test(\"Should fail if method is not POST\", () => {\r",
									"    if (pm.request.method !== \"POST\") {\r",
									"        pm.expect(pm.response.code).to.not.eql(200);\r",
									"    }\r",
									"});\r",
									"\r",
									"//  18. Totalprice must be number\r",
									"pm.test(\"Total price is a number\", () => {\r",
									"    pm.expect(jsonData.booking.totalprice).to.be.a(\"number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						},
						"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "UpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Try parsing JSON\r",
									"let jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    jsonData = {};\r",
									"}\r",
									"\r",
									"//  1. Status Code = 200\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"//  2. Content-Type is JSON\r",
									"pm.test(\"Content-Type is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//  3. Response Time < 1000ms\r",
									"pm.test(\"Response time is under 1000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//  4. Check returned values\r",
									"pm.test(\"Booking data updated correctly\", () => {\r",
									"    pm.expect(jsonData.firstname).to.eql(\"James\");\r",
									"    pm.expect(jsonData.lastname).to.eql(\"Brown\");\r",
									"    pm.expect(jsonData.totalprice).to.eql(150);\r",
									"    pm.expect(jsonData.depositpaid).to.eql(false);\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(\"Lunch\");\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2023-01-01\");\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2023-01-05\");\r",
									"});\r",
									"\r",
									"//  5. Schema Validation\r",
									"const schema = {\r",
									"    type: \"object\",\r",
									"    properties: {\r",
									"        firstname: { type: \"string\" },\r",
									"        lastname: { type: \"string\" },\r",
									"        totalprice: { type: \"number\" },\r",
									"        depositpaid: { type: \"boolean\" },\r",
									"        bookingdates: {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"                checkin: { type: \"string\" },\r",
									"                checkout: { type: \"string\" }\r",
									"            },\r",
									"            required: [\"checkin\", \"checkout\"]\r",
									"        },\r",
									"        additionalneeds: { type: \"string\" }\r",
									"    },\r",
									"    required: [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"//  6. Security: No HTML or JS\r",
									"pm.test(\"No script or HTML in response\", () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.not.include(\"<script>\");\r",
									"    pm.expect(body).to.not.include(\"<html>\");\r",
									"});\r",
									"\r",
									"// ❌ 7. Invalid Update (if body is missing or malformed)\r",
									"const rawBody = pm.request.body.raw || \"{}\";\r",
									"try {\r",
									"    const bodyParsed = JSON.parse(rawBody);\r",
									"    const fields = [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\"];\r",
									"    const missingFields = fields.filter(f => !Object.keys(bodyParsed).includes(f));\r",
									"    if (missingFields.length > 0) {\r",
									"        pm.test(\"Missing required fields should fail\", () => {\r",
									"            pm.expect(pm.response.code).to.not.eql(200);\r",
									"        });\r",
									"    }\r",
									"} catch (e) {\r",
									"    pm.test(\"Malformed body should fail\", () => {\r",
									"        pm.expect(pm.response.code).to.not.eql(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"//  8. Consistency Check (optional)\r",
									"const lastUpdatedData = pm.environment.get(\"lastUpdatedBooking\");\r",
									"if (lastUpdatedData) {\r",
									"    pm.test(\"Booking changes from previous\", () => {\r",
									"        pm.expect(pm.response.text()).to.not.eql(lastUpdatedData);\r",
									"    });\r",
									"}\r",
									"pm.environment.set(\"lastUpdatedBooking\", pm.response.text());\r",
									"\r",
									"//  9. Cookie Check\r",
									"pm.test(\"Authentication cookie exists if required\", () => {\r",
									"    const cookie = pm.request.headers.find(h => h.key.toLowerCase() === \"cookie\");\r",
									"    pm.expect(cookie).to.not.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=b034a1be5c68dd8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/1",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"1"
							]
						},
						"description": "Generated from cURL: curl -X PUT \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "PartialUpdateBooking",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/1",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"1"
							]
						},
						"description": "Generated from cURL: curl -X PUT \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "DeleteBooking",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							}
						],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking/1",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking",
								"1"
							]
						},
						"description": "Generated from cURL: curl -X DELETE \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Cookie: token=abc123'"
					},
					"response": []
				}
			]
		},
		{
			"name": "Ping",
			"item": [
				{
					"name": "HealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  1. Status code is 201 (Created expected)\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(201);\r",
									"});\r",
									"\r",
									"//  2. Response time is acceptable (less than 500ms)\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//  3. Content-Type is text/plain or missing (some health checks don't return Content-Type)\r",
									"pm.test(\"Content-Type is text/plain or acceptable\", function () {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
									"    pm.expect(contentType).to.satisfy(type =>\r",
									"        type.includes(\"text/plain\") || type === \"\" || type.includes(\"charset\")\r",
									"    );\r",
									"});\r",
									"\r",
									"//  4. Response body is exactly \"Created\"\r",
									"pm.test('Response body is exactly \"Created\"', function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"Created\");\r",
									"});\r",
									"\r",
									"//  5. Body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text().trim()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//  6. No JSON returned (should be plain text)\r",
									"pm.test(\"Response is NOT JSON\", function () {\r",
									"    let isJSON = false;\r",
									"    try {\r",
									"        JSON.parse(pm.response.text());\r",
									"        isJSON = true;\r",
									"    } catch (e) {\r",
									"        isJSON = false;\r",
									"    }\r",
									"    pm.expect(isJSON).to.eql(false);\r",
									"});\r",
									"\r",
									"//  7. Response doesn’t contain HTML or script tags (security sanity check)\r",
									"pm.test(\"Response does not contain HTML or script tags\", function () {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.not.include(\"<\");\r",
									"    pm.expect(body).to.not.include(\">\");\r",
									"    pm.expect(body).to.not.include(\"<script>\");\r",
									"});\r",
									"\r",
									"//  8. Check if it fails with wrong method (only works with GET)\r",
									"pm.test(\"Should fail with wrong method (if tested manually)\", function () {\r",
									"    if (pm.request.method !== \"GET\") {\r",
									"        pm.expect(pm.response.code).to.not.equal(201);\r",
									"    }\r",
									"});\r",
									"\r",
									"//  9. Check that no cookies are returned (shouldn’t return any for /ping)\r",
									"pm.test(\"No cookies should be set\", function () {\r",
									"    pm.expect(pm.cookies.toObject()).to.be.empty;\r",
									"});\r",
									"\r",
									"//  10. Validate Content-Length header exists and matches actual length\r",
									"pm.test(\"Content-Length header is correct\", function () {\r",
									"    const contentLength = pm.response.headers.get(\"Content-Length\");\r",
									"    const bodyLength = pm.response.text().length;\r",
									"    if (contentLength) {\r",
									"        pm.expect(parseInt(contentLength)).to.eql(bodyLength);\r",
									"    }\r",
									"});\r",
									"\r",
									"//  11. Check for idempotency (ping always same response)\r",
									"const lastPing = pm.environment.get(\"lastPingResponse\");\r",
									"const currentPing = pm.response.text();\r",
									"\r",
									"pm.test(\"Ping response is consistent\", function () {\r",
									"    if (lastPing) {\r",
									"        pm.expect(currentPing).to.eql(lastPing);\r",
									"    }\r",
									"    pm.environment.set(\"lastPingResponse\", currentPing);\r",
									"});\r",
									"\r",
									"//  12. Schema validation (text only, but just in case)\r",
									"const schema = {\r",
									"    type: \"string\",\r",
									"    enum: [\"Created\"]\r",
									"};\r",
									"pm.test(\"Schema validation for string response\", function () {\r",
									"    pm.expect(tv4.validate(pm.response.text(), schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://restful-booker.herokuapp.com/ping",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}